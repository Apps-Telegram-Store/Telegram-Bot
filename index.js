import 'dotenv/config';

import TelegramBot from 'node-telegram-bot-api';
import axios from 'axios';
import { createUser } from './module/createUser.js';
import { autoSendMessage } from './module/autoSendMessage.js';

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

const keyboard = [
    [
        {
            text: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—èüìö',
            callback_data: 'instruction_click'
        },
        {
            text: 'Telegram –∫–∞–Ω–∞–ª‚úàÔ∏è',
            url: process.env.TELEGRAM_CHANNEL
        }
    ],
    [
        {
            text: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µüì°',
            web_app: {
                url: process.env.URL_APP
            }
        }
    ]
]

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    await bot.sendSticker(chatId, "CAACAgIAAxkBAAM2ZoZ1XnAPiRQbA5VLNXZt2Xx-LYwAAgEBAAJWnb0KIr6fDrjC5jQ1BA");
    await bot.sendMessage(chatId, 
        '<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π Telegram!</b> üòâ \n\n–£ –Ω–∞—Å —Ç—ã –º–æ–∂–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ Telegram. \n\n–ê —Ç–∞–∫ –∂–µ –º–æ–∂–µ—à—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!',
        {
            parse_mode: "HTML",
            reply_markup: {
                inline_keyboard: keyboard
            }
        },
    );
    await createUser(msg.from.username, msg.from.id);
});

bot.onText(/\/sendMessage (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const message = match[1]; // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã

    if (!message) {
        bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.");
        return;
    }

    bot.sendMessage(chatId, "–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...");
    await autoSendMessage(bot, message);
    bot.sendMessage(chatId, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
});

bot.on('callback_query', (callbackQuery) => {
    const msg = callbackQuery.message;
    const chatId = msg.chat.id;
    const data = callbackQuery.data;
    if (data === 'instruction_click') {
        const backKeyboard = {
            inline_keyboard: [
                [
                    {
                        text: '–ù–∞–∑–∞–¥',
                        callback_data: 'back_to_start'
                    }
                ]
            ]
        };

        bot.editMessageText('–í–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: GA', {
            chat_id: chatId,
            message_id: msg.message_id,
            reply_markup: backKeyboard
        });

    } else if (data === 'back_to_start') {

        bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', {
            chat_id: chatId,
            message_id: msg.message_id,
            reply_markup: {
                inline_keyboard: keyboard
            }
        });
    }
    bot.answerCallbackQuery(callbackQuery.id);
});

bot.onText(/\/donate/, async (msg) => {
    const chatId = msg.chat.id;
    const payload = 'unique_payload';
    const providerToken = process.env.PROVIDER_TOKEN;
    const prices = [{ label: 'Digital Good', amount: 1 }]; // —Å—É–º–º–∞ –≤ –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö Stars

    try {
        const response = await axios.post(`https://api.telegram.org/bot${process.env.BOT_TOKEN}/createInvoiceLink`, {
            title: '–î–æ–Ω–∞—Ç –∑–≤–µ–∑–¥–∞–º–∏',
            description: '–î–æ–Ω–∞—Ç —Å –ø–æ–º–æ—â—å Telegram Stars',
            payload: payload,
            provider_token: providerToken,
            currency: 'XTR',
            prices: prices
        });

        const invoiceLink = response.data.result;
        bot.sendMessage(chatId, `–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: <a href="${invoiceLink}">–ü–û–ë–õ–ê–ì–û–î–ê–†–ò–¢–¨</a>`, {
            parse_mode: "HTML"
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—á–µ—Ç:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É.');
    }
});

bot.on('pre_checkout_query', (query) => {
    bot.answerPreCheckoutQuery(query.id, true);
});

bot.on('successful_payment', (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ –≤–∞—à–∏ –¥–æ–Ω–∞—Ç—ã!');
});

bot.on('polling_error', (error) => {
    console.log(error);
});